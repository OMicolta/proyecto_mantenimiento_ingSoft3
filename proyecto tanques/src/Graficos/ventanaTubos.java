
package Graficos;

import Logica.Acueducto;
import Logica.Nodo;
import Objetos.Barrio;
import Objetos.Tanque;
import Objetos.Tubo;
import java.awt.HeadlessException;
import java.awt.event.MouseEvent;
import java.awt.geom.Rectangle2D;
import java.util.LinkedList;
import javax.swing.JOptionPane;

/**
 *
 * @author usuario
 */
public class ventanaTubos extends javax.swing.JFrame {

    Acueducto ciudad;
    Barrio barrio;
    Tanque tanque;
    Tubo tubo;
    Nodo nodo;
    Nodo seleccionado1;
    Nodo seleccionado2;
    int saldo;
    LinkedList<Tubo> L;
    boolean selt;

    public ventanaTubos() {
        initComponents();
        ciudad = new Acueducto();
        jPanel1.setCiudad(ciudad);
        contarsaldo();
        saldo = 200000;
        jPanel1.setSaldo(saldo);
        jButton1.setVisible(false);
        L = new LinkedList<Tubo>();
        jPanel1.setL(L);
        selt = false;
        jButton2.setVisible(false);
        jButton3.setVisible(false);
        jLabel8.setVisible(false);
        jLabel9.setVisible(false);
        jLabel10.setVisible(false);
        jLabel11.setVisible(false);
        jLabel12.setVisible(false);
        jLabel13.setVisible(false);
        jLabel14.setVisible(false);
        jLabel15.setVisible(false);
        jLabel16.setVisible(false);
        jLabel17.setVisible(false);
        jLabel18.setVisible(false);
        jTextField2.setVisible(false);
        jTextField3.setVisible(false);
        jTextField4.setVisible(false);
        jTextField5.setVisible(false);
        jTextField6.setVisible(false);
        jTextField7.setVisible(false);
        jTextField8.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jComboBox1 = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jTextField7 = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jTextField8 = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jPanel1 = new Graficos.jPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1366, 700));
        setResizable(false);

        jPanel2.setBackground(new java.awt.Color(204, 119, 186));
        jPanel2.setMaximumSize(new java.awt.Dimension(260, 700));
        jPanel2.setMinimumSize(new java.awt.Dimension(260, 700));
        jPanel2.setPreferredSize(new java.awt.Dimension(260, 700));

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccionar acción", "Agregar Tanque", "Agregar Barrio", "Agregar Tubo", "Obstruir tubo", "Reparar tubo", "Cambiar direccion de tubo", "Proponer nuevos tubos", "Ver detalles", "Ingresar restriccion de tanques" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jButton1.setText("Mostrar Rutas Alternas");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Seleccionar Barrio");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Sin seleccionar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton5.setText("Cargar ciudad");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Algerian", 1, 18)); // NOI18N
        jLabel1.setText("simulacion fluidos ");

        jLabel2.setText("Saldo:");

        jTextField1.setEditable(false);
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Acciones");

        jLabel4.setText("Acción Primaria:");

        jLabel5.setText("Acción secundaria:");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setText("Ciudad Guardada");

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel8.setText("Detalles");

        jLabel9.setText("Barrios:");

        jLabel10.setText("Nombre:");

        jLabel11.setText("Necesidad");

        jLabel12.setText("Satisfecho");

        jLabel13.setText("Tanques:");

        jLabel14.setText("Capacidad:");

        jLabel15.setText("Agua Sobrante:");

        jLabel16.setText("Tubos:");

        jLabel17.setText("Capacidad:");

        jLabel18.setText("Agua transportada:");

        jLabel19.setText("dencidad del agua: p: 1.00x 10^3");

        jLabel20.setText("donde gravedad=9.8m/s^2");

        jLabel21.setText("comentario: para calcular el tiempo ");

        jLabel22.setText("de vacido de los tanques  utilizamos ");

        jLabel23.setText("el teorema de torricelli donde ");

        jLabel24.setText("la rapidez de salidad del agua es  ");

        jLabel25.setText("principalmente una funcion de p");

        jLabel26.setText("si el tanque esta abierto a la atmosfera,");

        jLabel27.setText("en tal caso  p=p0  y  v1= √2gh");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel1))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(77, 77, 77)
                .addComponent(jLabel7))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(106, 106, 106)
                .addComponent(jLabel8))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel13))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel16))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel4)
                        .addComponent(jLabel5)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addGap(31, 31, 31)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addGap(88, 88, 88)
                            .addComponent(jLabel3))))
                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                    .addGap(40, 40, 40)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addComponent(jLabel12)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jTextField4))
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel11)
                                .addComponent(jLabel10))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jTextField2)
                                .addComponent(jTextField3)))))
                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                    .addGap(38, 38, 38)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel14)
                        .addComponent(jLabel15))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jTextField6)
                        .addComponent(jTextField5)))
                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                    .addGap(288, 288, 288)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel18)
                        .addComponent(jLabel17))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jTextField7)
                        .addComponent(jTextField8))))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel20, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel19, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel22))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel23))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel27, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel26, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE)
                    .addComponent(jLabel24, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addGap(3, 3, 3)
                .addComponent(jButton5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addGap(10, 10, 10)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addGap(69, 69, 69)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel16)
                .addGap(18, 18, 18)
                .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel21)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel22)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel23)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel25)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel27)
                .addGap(247, 247, 247)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1097, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 700, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 106, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 1096, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 132, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseClicked
        try {
            if (selt) {
                if (selecciono(evt)) {
                    if (buscarseleccionado(evt).isTan()) {
                        JOptionPane.showMessageDialog(null, "Seleccione barrios no tanques.");
                    } else {
                        L = ciudad.ProponerConexiones(buscarseleccionado(evt));
                        selt = false;
                        jPanel1.setL(L);
                    }
                }
            } else {
                if (jComboBox1.getSelectedItem().toString().equalsIgnoreCase("Seleccionar acción")) {
                    JOptionPane.showMessageDialog(null, "No has seleccionado Acción");
                } else if (jComboBox1.getSelectedItem().toString().equalsIgnoreCase("Agregar Barrio")) {
                    if (!selecciono(evt)) {
                        barrio = new Barrio(evt.getX() - 75, evt.getY() - 75, Integer.parseInt(JOptionPane.showInputDialog("Ingrese la cantidad de habitantes del barrio")), JOptionPane.showInputDialog("Ingrese el nombre del barrio"));
                        nodo = new Nodo(barrio);
                        ciudad.add(nodo);
                    } else {
                        JOptionPane.showMessageDialog(null, "No puedes instalar una Construccion sobre otra");
                    }

                } else if (jComboBox1.getSelectedItem().toString().equalsIgnoreCase("Agregar Tanque")) {
                    if (!selecciono(evt)) {
                        tanque = new Tanque(Integer.parseInt(JOptionPane.showInputDialog("Ingrese la capacidad del Tanque")), evt.getX() - 45, evt.getY() - 45);
                        if (tanque.getCostoTotal() <= saldo) {
                            nodo = new Nodo(tanque);
                            ciudad.add(nodo);
                            saldo = saldo - (tanque.getCapacidad_maxima() * 100);
                        } else {
                            JOptionPane.showMessageDialog(null, "El costo del tanque supera tu saldo." + "\n" + "Precio bruto:  " + tanque.getPrecioBruto() + " \n" + "Mano de Obra: " + tanque.getManoObra() + "\n" + "Costo total:" + tanque.getCostoTotal() + "\n" + "saldo: " + saldo);
                            tanque = null;
                        }

                    } else {
                        JOptionPane.showMessageDialog(null, "No puedes instalar una Construccion sobre otra");
                    }

                } else if (jComboBox1.getSelectedItem().toString().equalsIgnoreCase("Agregar Tubo")) {
                    int xini = 0, yini = 0, xfin = 0, yfin = 0;
                    if (seleccionado1 == null && seleccionado2 == null) {
                        if (buscarseleccionado(evt) != null) {
                            seleccionado1 = buscarseleccionado(evt);
                        }
                    } else {
                        if (buscarseleccionado(evt) != null && seleccionado1 != buscarseleccionado(evt)) {
                            seleccionado2 = buscarseleccionado(evt);
                            if (!seleccionado1.isTan() && seleccionado2.isTan()) {
                                JOptionPane.showMessageDialog(null, "No se puede crear una tubo en direccion de una casa a un tanque" + "\n" + "\n" + "Seleccione de nuevo puntos lógicos");
                                seleccionado1 = null;
                                seleccionado2 = null;
                            } else {
                                if (seleccionado1.isTan()) {
                                    xini = seleccionado1.getTanque().getX() + 45;
                                    yini = seleccionado1.getTanque().getY() + 45;
                                } else {
                                    xini = seleccionado1.getBarrio().getX() + 75;
                                    yini = seleccionado1.getBarrio().getY() + 75;
                                }
                                if (seleccionado2.isTan()) {
                                    xfin = seleccionado2.getTanque().getX() + 45;
                                    yfin = seleccionado2.getTanque().getY() + 45;
                                } else {
                                    xfin = seleccionado2.getBarrio().getX() + 75;
                                    yfin = seleccionado2.getBarrio().getY() + 75;
                                }

                                tubo = new Tubo(Integer.parseInt(JOptionPane.showInputDialog("ingrese la capacidad del tubo")), 0, xini, xfin, yini, yfin);
                                if (tubo.getCostoTotal() <= saldo) {
                                    ciudad.add(seleccionado1, seleccionado2, tubo);
                                    seleccionado1 = null;
                                    seleccionado2 = null;
                                    saldo = saldo - tubo.getCostoTotal();
                                    jTextField1.setText("" + saldo);
                                } else {
                                    JOptionPane.showMessageDialog(null, "El costo del tubo supera tu saldo." + "\n" + "Precio bruto:  " + tubo.getPrecioBruto() + " \n" + "Mano de Obra: " + tubo.getManoObra() + "\n" + "Costo total:" + tubo.getCostoTotal() + "\n" + "saldo: " + saldo);
                                    seleccionado1 = null;
                                    seleccionado2 = null;
                                    tubo = null;
                                }
                                desbyinsatis();
                            }
                        }
                    }
                } else if (jComboBox1.getSelectedItem().toString().equalsIgnoreCase("Obstruir tubo")) {
                    if (!Haytubos()) {
                        JOptionPane.showMessageDialog(null, "No hay tubos para simular Obstrucciones");
                    } else {
                        for (int i = 0; i < ciudad.conexiones.length; i++) {
                            for (int j = 0; j < ciudad.conexiones.length; j++) {
                                if (ciudad.conexiones[i][j] != null) {
                                    if (intersectatubo(ciudad.conexiones[i][j], evt)) {
                                        ciudad.conexiones[i][j].setObst(true);
                                    }
                                }
                            }
                        }
                    }
                    desbyinsatis();
                    if (tubosobstruidos()) {
                        jButton1.setVisible(true);
                    } else {
                        jButton1.setVisible(false);
                        ciudad.RutasAlternas(ciudad.Nodos.getFirst(), ciudad.Nodos.getLast());
                    }
                } else if (jComboBox1.getSelectedItem().toString().equalsIgnoreCase("Cambiar direccion de tubo")) {
                    for (int i = 0; i < ciudad.conexiones.length; i++) {
                        for (int j = 0; j < ciudad.conexiones.length; j++) {
                            if (ciudad.conexiones[i][j] != null) {
                                if (intersectatubo(ciudad.conexiones[i][j], evt)) {
                                    if (!ciudad.Nodos.get(j).isTan() && ciudad.Nodos.get(i).isTan()) {
                                        JOptionPane.showMessageDialog(null, "No se puede enviar agua de una casa a un tanque." + "\n" + "\n" + "Intente seleccionando un tub diferente.");
                                    } else {
                                        if (ciudad.conexiones[i][j].getPrecioBruto() <= saldo) {
                                            Tubo t = new Tubo(ciudad.conexiones[i][j].getCapacidad(), ciudad.conexiones[i][j].getTransportando(), ciudad.conexiones[i][j].getXfin(), ciudad.conexiones[i][j].getXini(), ciudad.conexiones[i][j].getYfin(), ciudad.conexiones[i][j].getYini());
                                            ciudad.conexiones[j][i] = t;
                                            ciudad.conexiones[i][j] = null;
                                            saldo = saldo - ciudad.conexiones[i][j].getPrecioBruto();
                                            jTextField1.setText("" + saldo);
                                        } else {
                                            JOptionPane.showMessageDialog(null, "No tienes saldo suficiente para cambiar la direccion del tubo." + "\n" + "Precio de Cambio:  " + tanque.getPrecioBruto() + "\n" + "saldo: " + saldo);
                                        }
                                        return;
                                    }

                                }
                            }
                        }
                    }
                    desbyinsatis();
                    if (tubosobstruidos()) {
                        jButton1.setVisible(true);
                    } else {
                        jButton1.setVisible(false);
                        ciudad.RutasAlternas(ciudad.Nodos.getFirst(), ciudad.Nodos.getLast());
                    }
                } else if (jComboBox1.getSelectedItem().toString().equalsIgnoreCase("Reparar tubo")) {
                    if (!Haytubos()) {
                        JOptionPane.showMessageDialog(null, "No hay tubos para simular Obstrucciones");
                    } else {
                        for (int i = 0; i < ciudad.conexiones.length; i++) {
                            for (int j = 0; j < ciudad.conexiones.length; j++) {
                                if (ciudad.conexiones[i][j] != null) {
                                    if (intersectatubo(ciudad.conexiones[i][j], evt)) {
                                        if (ciudad.conexiones[i][j].getManoObra() <= saldo) {
                                            ciudad.conexiones[i][j].setObst(false);
                                            saldo = saldo - ciudad.conexiones[i][j].getManoObra();
                                            jTextField1.setText("" + saldo);
                                        } else {
                                            JOptionPane.showMessageDialog(null, "No tienes saldo suficiente para reparar el tubo." + "\n" + "Costo de reparacion:  " + tanque.getManoObra() + "\n" + "saldo: " + saldo);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    desbyinsatis();
                } else if (jComboBox1.getSelectedItem().toString().equalsIgnoreCase("Ver detalles")) {
                    jLabel8.setVisible(false);
                    jLabel9.setVisible(false);
                    jLabel10.setVisible(false);
                    jLabel11.setVisible(false);
                    jLabel12.setVisible(false);
                    jLabel13.setVisible(false);
                    jLabel14.setVisible(false);
                    jLabel15.setVisible(false);
                    jLabel16.setVisible(false);
                    jLabel17.setVisible(false);
                    jLabel18.setVisible(false);
                    jTextField2.setVisible(false);
                    jTextField3.setVisible(false);
                    jTextField4.setVisible(false);
                    jTextField5.setVisible(false);
                    jTextField6.setVisible(false);
                    jTextField7.setVisible(false);
                    jTextField8.setVisible(false);
                    jTextField2.setText("");
                    jTextField3.setText("");
                    jTextField4.setText("");
                    jTextField5.setText("");
                    jTextField6.setText("");
                    jTextField7.setText("");
                    jTextField8.setText("");
                    if (buscarseleccionado(evt) != null) {
                        jLabel8.setVisible(true);
                        if (!buscarseleccionado(evt).tan) {
                            jLabel9.setVisible(true);
                            jLabel10.setVisible(true);
                            jLabel11.setVisible(true);
                            jLabel12.setVisible(true);
                            jTextField2.setVisible(true);
                            jTextField3.setVisible(true);
                            jTextField4.setVisible(true);
                            jTextField2.setText(buscarseleccionado(evt).barrio.getNombre());
                            jTextField3.setText("" + buscarseleccionado(evt).barrio.getNecesidad());
                            jTextField4.setText("" + buscarseleccionado(evt).barrio.getActual());
                        } else {
                            jLabel13.setVisible(true);
                            jLabel14.setVisible(true);
                            jLabel15.setVisible(true);
                            jTextField5.setVisible(true);
                            jTextField6.setVisible(true);
                            jTextField5.setText("" + buscarseleccionado(evt).tanque.getCapacidad_maxima());
                            jTextField6.setText("" + buscarseleccionado(evt).tanque.getAgua());

                        }
                    } else {
                        for (int i = 0; i < ciudad.conexiones.length; i++) {
                            for (int j = 0; j < ciudad.conexiones.length; j++) {
                                if (ciudad.conexiones[i][j] != null) {
                                    if (intersectatubo(ciudad.conexiones[i][j], evt)) {
                                        jLabel8.setVisible(true);
                                        jTextField7.setText("" + ciudad.conexiones[i][j].getCapacidad());
                                        jTextField8.setText("" + ciudad.conexiones[i][j].getTransportando());
                                        jLabel16.setVisible(true);
                                        jLabel17.setVisible(true);
                                        jLabel18.setVisible(true);
                                        jTextField7.setVisible(true);
                                        jTextField8.setVisible(true);
                                    }
                                }
                            }
                        }
                    }
                }
                if (Haytubos()) {
                    if (tubosobstruidos()) {
                        jButton1.setVisible(true);
                    } else {
                        jButton1.setVisible(false);
                        ciudad.RutasAlternas(ciudad.Nodos.getFirst(), ciudad.Nodos.getLast());
                    }
                }

            }
        } catch (HeadlessException | NumberFormatException e) {
        }
        repaint();
    }//GEN-LAST:event_jPanel1MouseClicked

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        jTextField1.setText("paspasasasa");
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        if (!ciudad.Nodos.isEmpty()) {
            ciudad = new Acueducto();
        }
        ciudad.leerMapa();
        jPanel1.setCiudad(ciudad);
        desbyinsatis();
        jPanel1.repaint();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        L = ciudad.ProponerConexiones(null);
        jPanel1.setL(L);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        selt = true;
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        for (int i = 0; i < ciudad.conexiones.length; i++) {
            for (int j = 0; j < ciudad.conexiones.length; j++) {
                if (ciudad.conexiones[i][j] != null) {
                    ciudad.conexiones[i][j].setAlterna(false);
                }
            }
        }
        for (int i = 0; i < ciudad.conexiones.length; i++) {
            for (int j = 0; j < ciudad.conexiones.length; j++) {
                if (ciudad.conexiones[i][j] != null) {
                    if (ciudad.conexiones[i][j].isObst()) {
                        ciudad.RutasAlternas(ciudad.Nodos.get(i), ciudad.Nodos.get(j));
                    }
                }
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        if (jComboBox1.getSelectedItem().toString().equalsIgnoreCase("Proponer nuevos tubos")) {
            jButton2.setVisible(true);
            jButton3.setVisible(true);
        } else if (jComboBox1.getSelectedItem().toString().equalsIgnoreCase("Ingresar restriccion de tanques")) {
            LinkedList<Nodo> tanques = ciudad.Restriccion(Integer.parseInt(JOptionPane.showInputDialog("Ingrese la restriccion")));
            ciudad = new Acueducto();
            jPanel1.setCiudad(ciudad);
            jPanel1.setTanques(tanques);
            jPanel1.repaint();
        } else {
            jButton2.setVisible(false);
            jButton3.setVisible(false);
            L = new LinkedList<Tubo>();
            jPanel1.setL(L);
            selt = false;
        }
        jLabel8.setVisible(false);
        jLabel9.setVisible(false);
        jLabel10.setVisible(false);
        jLabel11.setVisible(false);
        jLabel12.setVisible(false);
        jLabel13.setVisible(false);
        jLabel14.setVisible(false);
        jLabel15.setVisible(false);
        jLabel16.setVisible(false);
        jLabel17.setVisible(false);
        jLabel18.setVisible(false);
        jTextField2.setVisible(false);
        jTextField3.setVisible(false);
        jTextField4.setVisible(false);
        jTextField5.setVisible(false);
        jTextField6.setVisible(false);
        jTextField7.setVisible(false);
        jTextField8.setVisible(false);
        repaint();
    }//GEN-LAST:event_jComboBox1ActionPerformed
    //manda agua a toda la ciudad

    public void desbyinsatis() {
        for (int i = 0; i < ciudad.Nodos.size(); i++) {
            if (ciudad.Nodos.get(i).isTan()) {
                ciudad.Nodos.get(i).getTanque().setAgua(ciudad.Nodos.get(i).getTanque().getCapacidad_maxima());
            } else {
                ciudad.Nodos.get(i).getBarrio().setActual(0);
            }
        }
        for (int i = 0; i < ciudad.conexiones.length; i++) {
            for (int j = 0; j < ciudad.conexiones.length; j++) {
                if (ciudad.conexiones[i][j] != null) {
                    ciudad.conexiones[i][j].setTransportando(0);
                }
            }
        }
        ciudad.TransportarAgua();
        for (int i = 0; i < ciudad.Nodos.size(); i++) {
            if (ciudad.Nodos.get(i).isTan()) {
                if (ciudad.Nodos.get(i).getTanque().getAgua() > ciudad.Nodos.get(i).getTanque().getCapacidad_maxima()) {
                    ciudad.Nodos.get(i).getTanque().setDesbordo(true);
                } else {
                    ciudad.Nodos.get(i).getTanque().setDesbordo(false);
                }
            } else {
                if (ciudad.Nodos.get(i).getBarrio().getActual() > ciudad.Nodos.get(i).getBarrio().getNecesidad()) {
                    ciudad.Nodos.get(i).getBarrio().setDesbordo(true);
                } else {
                    ciudad.Nodos.get(i).getBarrio().setDesbordo(false);
                }
                if (ciudad.Nodos.get(i).getBarrio().getActual() < ciudad.Nodos.get(i).getBarrio().getNecesidad()) {
                    ciudad.Nodos.get(i).getBarrio().setInsatisfecho(true);
                } else {
                    ciudad.Nodos.get(i).getBarrio().setInsatisfecho(false);
                }
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;


                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ventanaTubos.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ventanaTubos.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ventanaTubos.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ventanaTubos.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new ventanaTubos().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton5;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private Graficos.jPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    // End of variables declaration//GEN-END:variables

    private boolean selecciono(MouseEvent evt) {
        for (int i = 0; i < ciudad.Nodos.size(); i++) {
            Nodo nodo2 = ciudad.Nodos.get(i);
            if (nodo2.isTan()) {
                if ((evt.getX() > nodo2.getTanque().getX() && evt.getX() < nodo2.getTanque().getX() + nodo2.getTanque().getAncho()) && (evt.getY() > nodo2.getTanque().getY() && evt.getY() < nodo2.getTanque().getY() + nodo2.getTanque().getAlto())) {
                    return true;
                }
            } else {
                if ((evt.getX() > nodo2.getBarrio().getX() && evt.getX() < nodo2.getBarrio().getX() + nodo2.getBarrio().getAncho()) && (evt.getY() > nodo2.getBarrio().getY() && evt.getY() < nodo2.getBarrio().getY() + nodo2.getBarrio().getAlto())) {
                    return true;
                }
            }
        }
        return false;
    }

    private Nodo buscarseleccionado(MouseEvent evt) {
        for (int i = 0; i < ciudad.Nodos.size(); i++) {
            Nodo nodo2 = ciudad.Nodos.get(i);
            if (nodo2.isTan()) {
                if ((evt.getX() > nodo2.getTanque().getX() && evt.getX() < nodo2.getTanque().getX() + nodo2.getTanque().getAncho()) && (evt.getY() > nodo2.getTanque().getY() && evt.getY() < nodo2.getTanque().getY() + nodo2.getTanque().getAlto())) {
                    return nodo2;
                }
            } else {
                if ((evt.getX() > nodo2.getBarrio().getX() && evt.getX() < nodo2.getBarrio().getX() + nodo2.getBarrio().getAncho()) && (evt.getY() > nodo2.getBarrio().getY() && evt.getY() < nodo2.getBarrio().getY() + nodo2.getBarrio().getAlto())) {
                    return nodo2;
                }
            }

        }
        return null;
    }

    private boolean Haytubos() {
        for (int i = 0; i < ciudad.conexiones.length; i++) {
            for (int j = 0; j < ciudad.conexiones.length; j++) {
                if (ciudad.conexiones[i][j] != null) {
                    return true;
                }
            }
        }
        return false;
    }

    private void contarsaldo() {
        Thread h = new Thread(new Runnable() {
            @Override
            public void run() {
                while (true) {
                    try {
                        saldo = saldo + 20;
                        jTextField1.setText("" + saldo);
                        Thread.sleep(5000);
                    } catch (Exception e) {
                    }
                }
            }
        });
        h.start();
    }

    private boolean intersectatubo(Tubo tubo, MouseEvent evt) {
        Rectangle2D click = new Rectangle2D.Double(evt.getX(), evt.getY(), 2, 2);
        int posxi = tubo.getXini() - 5;
        int posxf = tubo.getXfin() - 5;
        int posyi = tubo.getYini() - 5;
        int posyf = tubo.getYfin() - 5;
        for (int i = 0; i < 10; i++) {
            if (click.intersectsLine(posxi, posyi, posxf, posyf)) {
                return true;
            }
            posxi++;
            posxf++;
            posyi++;
            posyf++;
        }
        return false;
    }

    private boolean tubosobstruidos() {
        for (int i = 0; i < ciudad.conexiones.length; i++) {
            for (int j = 0; j < ciudad.conexiones.length; j++) {
                if (ciudad.conexiones[i][j] != null) {
                    if (ciudad.conexiones[i][j].isObst()) {
                        return true;
                    }
                }
            }
        }
        return false;
    }
}
